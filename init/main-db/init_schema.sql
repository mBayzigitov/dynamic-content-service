----------------------- TABLES -----------------------
------------------------------------------------------
DROP TABLE IF EXISTS features;
CREATE TABLE features
(
    id   BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255)
);

DROP TABLE IF EXISTS tags;
CREATE TABLE tags
(
    id   BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255)
);

DROP TABLE IF EXISTS banners;
CREATE TABLE banners
(
    id            BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    last_revision BIGINT NOT NULL DEFAULT 1,
    content       JSONB  NOT NULL,
    feature_id    BIGINT,
    created_at    TIMESTAMP       DEFAULT now(),
    updated_at    TIMESTAMP       DEFAULT now(),
    is_active     BOOL            DEFAULT true,
    to_delete     BOOL            DEFAULT false,
    FOREIGN KEY (feature_id) REFERENCES features (id)
);

DROP TABLE IF EXISTS banners_tags;
CREATE TABLE banners_tags
(
    banner_id BIGINT,
    tag_id    BIGINT,
    FOREIGN KEY (banner_id) REFERENCES banners (id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES tags (id) ON DELETE CASCADE,
    CONSTRAINT banners_tags_pk PRIMARY KEY (banner_id, tag_id)
);

DROP TABLE IF EXISTS banner_version;
CREATE TABLE banner_version
(
    id         BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    banner_id  BIGINT references banners (id) ON DELETE CASCADE,
    version    BIGINT    DEFAULT 1,
    feature_id BIGINT NOT NULL,
    tags       TEXT,
    content    JSONB  NOT NULL,
    created_at TIMESTAMP DEFAULT now(),
    UNIQUE (version, banner_id)
);

-- deletes older banner_version records
-- keeps previous 3 versions and the current one
-- EXAMPLE: [1 2 3] add version 4 -> delete where id < 1 -> RESULT [1 2 3 4]
-- add version 5 -> delete where id < 2 -> RESULT [2 3 4 5]
CREATE OR REPLACE FUNCTION delete_old_banner_versions() RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM banner_version bv
    WHERE bv.version < NEW.version - 3;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- trigger that calls the function before inserting a new record into banner_version
CREATE TRIGGER before_insert_banner_version
    BEFORE INSERT ON banner_version
    FOR EACH ROW
EXECUTE FUNCTION delete_old_banner_versions();
